[
    {
        "id": "84a1a3d806bd7fe0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc1e134d11102e58",
        "type": "modbus-client",
        "name": "USB-SERIAL",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU",
        "serialBaudrate": "115200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "eefe72d8de19af9f",
        "type": "function",
        "z": "84a1a3d806bd7fe0",
        "name": "function 1",
        "func": "function readInt16x100(value) {\n    if (value > 32767) {\n        value = value - 65536;\n    }\n\n    return value / 100.0;\n}\n\nfunction readUint16x100(value) {\n    return value / 100.0;\n}\n\n\nfunction readUint32(MSR, LSR) {\n    return (MSR << 16) + LSR;\n}\n\nfunction readInt32(MSR, LSR) {\n    var value = (MSR << 16) + LSR;\n\n    if (value > 2147483647) {\n        value = value - 4294967296;\n    }\n\n    return value;\n}\n\nvar buffer = { payload: msg.payload.data };\n\n//Buffer has 20 bytes, representing the following:\n\n/*\ntypedef struct\n{\n    uint32_t timestamp;           //!< Timestamp of the system. 1 second resolution.\n    int16_t TempSustrato1;        //!< Temperature of the substrate 1. 0.01 degree resolution. (Register is multiplied by 100)\n    int16_t HumSustrato1;         //!< Humidity of the substrate 1. 0.01 % resolution. (Register is multiplied by 100)\n    int16_t TempAmbiente1;        //!< Temperature of the environment 1. 0.01 degree resolution. (Register is multiplied by 100)\n    int16_t HumAmbiente1;         //!< Humidity of the environment 1. 0.01 % resolution. (Register is multiplied by 100)\n    int16_t HumFol1;              //!< Humidity of the leaf 1. 0.01 % resolution. (Register is multiplied by 100)\n    int16_t TempSustrato2;        //!< Temperature of the substrate 2. 0.01 degree resolution. (Register is multiplied by 100)\n    int16_t HumSustrato2;         //!< Humidity of the substrate 2. 0.01 % resolution. (Register is multiplied by 100)\n    int16_t TempAmbiente2;        //!< Temperature of the environment 2. 0.01 degree resolution. (Register is multiplied by 100)\n    int16_t HumAmbiente2;         //!< Humidity of the environment 2. 0.01 % resolution. (Register is multiplied by 100)\n    int16_t HumFol2;              //!< Humidity of the leaf 2. 0.01 % resolution. (Register is multiplied by 100)\n    int16_t TempExterior;         //!< Temperature of the exterior. 0.01 degree resolution. (Register is multiplied by 100)\n    int16_t HumExterior;          //!< Humidity of the exterior. 0.01 % resolution. (Register is multiplied by 100)\n    uint16_t LuzExterior;         //!< Light of the exterior. 0.1 W/M2 resolution. (Register is multiplied by 10)\n    int16_t TempAgua;             //!< Temperature of the water. 0.01 degree resolution. (Register is multiplied by 100)\n    int16_t NivelAgua;            //!< Level of the water. 0.01 % resolution. (Register is multiplied by 100)\n    uint16_t PotenciaConsumida;   //!< Power consumed. 1 W resolution.\n    uint16_t Corriente_Consumida; //!< Current consumed. 0.1 A resolution. (Register is multiplied by 10)\n    uint16_t VoltajeConsumido;    //!< Voltage consumed. 0.1 V resolution. (Register is multiplied by 10)\n} holding_reg_params_t;\n*/\n\n//Read data and store into a new object json-like\n\nvar data = {\n    Timestamp: readUint32(buffer.payload[0], buffer.payload[1]),\n    TempSustrato1: readInt16x100(readUint16x100(buffer.payload[2])),\n    HumSustrato1: readInt16x100(readUint16x100(buffer.payload[3])),\n    TempAmbiente1: readInt16x100(readUint16x100(buffer.payload[4])),\n    HumAmbiente1: readInt16x100(readUint16x100(buffer.payload[5])),\n    HumFol1: readInt16x100(readUint16x100(buffer.payload[6])),\n    TempSustrato2: readInt16x100(readUint16x100(buffer.payload[7])),\n    HumSustrato2: readInt16x100(readUint16x100(buffer.payload[8])),\n    TempAmbiente2: readInt16x100(readUint16x100(buffer.payload[9])),\n    HumAmbiente2: readInt16x100(readUint16x100(buffer.payload[10])),\n    HumFol2: readInt16x100(readUint16x100(buffer.payload[11])),\n    TempExterior: readInt16x100(readUint16x100(buffer.payload[12])),\n    HumExterior: readInt16x100(readUint16x100(buffer.payload[13])),\n    LuzExterior: readUint16x100(buffer.payload[14]) * 10,\n    TempAgua: readInt16x100(readUint16x100(buffer.payload[15])),\n    NivelAgua: readInt16x100(readUint16x100(buffer.payload[16])),\n    PotenciaConsumida: buffer.payload[17],\n    Corriente_Consumida: readUint16x100(buffer.payload[18]) * 10,\n    VoltajeConsumido: readUint16x100(buffer.payload[19]) * 10\n};\n\nreturn data;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 220,
        "wires": [
            [
                "fb908caa00a627da"
            ]
        ]
    },
    {
        "id": "fb908caa00a627da",
        "type": "debug",
        "z": "84a1a3d806bd7fe0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 180,
        "wires": []
    },
    {
        "id": "b35dd44add045e20",
        "type": "debug",
        "z": "84a1a3d806bd7fe0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 420,
        "wires": []
    },
    {
        "id": "c22e1c7097d6bd03",
        "type": "debug",
        "z": "84a1a3d806bd7fe0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "6c65d46ea45ab6f1",
        "type": "modbus-getter",
        "z": "84a1a3d806bd7fe0",
        "name": "Leer Registros",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "20",
        "server": "bc1e134d11102e58",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 460,
        "y": 220,
        "wires": [
            [
                "c22e1c7097d6bd03"
            ],
            [
                "eefe72d8de19af9f",
                "b35dd44add045e20"
            ]
        ]
    },
    {
        "id": "557af5d310a10d41",
        "type": "trigger",
        "z": "84a1a3d806bd7fe0",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "6c65d46ea45ab6f1"
            ]
        ]
    },
    {
        "id": "a85e513498944ab0",
        "type": "inject",
        "z": "84a1a3d806bd7fe0",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "6c65d46ea45ab6f1"
            ]
        ]
    }
]